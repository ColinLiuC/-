// <auto-generated />
using System;
using CoreSolution.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreSolution.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(EfCoreDbContext))]
    partial class EfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreSolution.Domain.DoorCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuildLeaderUser")
                        .HasMaxLength(50);

                    b.Property<Guid>("BuildingId");

                    b.Property<string>("ChargeUser")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("DangDaiBiaoUser")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DoorCardNumber")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JuMingLeaderUser")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("T_DoorCard");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveState");

                    b.Property<string>("ActivityAddress")
                        .HasMaxLength(200);

                    b.Property<int?>("ActivityCycleType");

                    b.Property<string>("ActivityImg");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ActivityTimeDesc");

                    b.Property<int>("ActivityType");

                    b.Property<DateTime?>("AduitDate");

                    b.Property<int?>("AduitIsPass");

                    b.Property<string>("AduitRemarks")
                        .HasMaxLength(500);

                    b.Property<string>("ArchivalRemark")
                        .HasMaxLength(500);

                    b.Property<string>("Archiving")
                        .HasMaxLength(50);

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("Attachments");

                    b.Property<string>("Auditor");

                    b.Property<int?>("BrowsingVolume");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DetailsActivities");

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("ExpectedNumberParticipants");

                    b.Property<DateTime?>("FilingDate");

                    b.Property<int?>("Flag");

                    b.Property<string>("HostUnit")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("IsGuiDang");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("MeetingRoom");

                    b.Property<int?>("NumberParticipants");

                    b.Property<string>("PersonCharge")
                        .HasMaxLength(50);

                    b.Property<Guid>("PostStation");

                    b.Property<string>("PostStationName")
                        .HasMaxLength(50);

                    b.Property<string>("QRCode");

                    b.Property<DateTime>("StartTime");

                    b.Property<Guid>("Street");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TopDate");

                    b.HasKey("Id");

                    b.ToTable("T_Activity");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ActivityCheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EnrolmentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<DateTime?>("SignUpDate");

                    b.HasKey("Id");

                    b.ToTable("T_ActivityCheckIn");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ActivityEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EvaluationContent");

                    b.Property<string>("EvaluationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EvaluatorImgPath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.ToTable("T_ActivityEvaluation");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ActivityRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EnrolmentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsComment")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("IsShortInterest");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<DateTime?>("RegistDate");

                    b.Property<int>("Satisfaction")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_ActivityRegister");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(20);

                    b.Property<string>("IdCard")
                        .HasMaxLength(50);

                    b.Property<int?>("Integration");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsPhoneNumConfirmed");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Picture")
                        .HasMaxLength(100);

                    b.Property<string>("RealName")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserQRCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("T_AppUser");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(200);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100);

                    b.Property<string>("Parameters");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(200);

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("T_AuditLogs");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("BelongedYear");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsElevator");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Property")
                        .HasMaxLength(100);

                    b.Property<Guid>("PropertyId");

                    b.Property<Guid>("QuartersId");

                    b.Property<string>("QuartersName");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_Building");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ConferenceEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConferenceRoomId");

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.HasKey("Id");

                    b.ToTable("T_ConferenceEquipment");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ConferenceRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("CompetentUnit")
                        .HasMaxLength(500);

                    b.Property<string>("ConferenceRoomName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ConferenceRoomState");

                    b.Property<Guid>("ConferenceRoomType");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DetailedDescr")
                        .HasMaxLength(500);

                    b.Property<string>("ImgName")
                        .HasMaxLength(50);

                    b.Property<string>("ImgPath");

                    b.Property<bool>("IsCharge");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Pedestal");

                    b.Property<string>("PersonInCharge")
                        .HasMaxLength(50);

                    b.Property<Guid>("PostStation");

                    b.Property<string>("PostStationName");

                    b.Property<int>("State");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName");

                    b.HasKey("Id");

                    b.ToTable("T_ConferenceRoom");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ConferenceRoomRegist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicanContactNumbert")
                        .HasMaxLength(50);

                    b.Property<string>("Applicant")
                        .HasMaxLength(50);

                    b.Property<string>("ApplicationUnit")
                        .HasMaxLength(100);

                    b.Property<Guid>("ConferenceRoomId");

                    b.Property<string>("ConferenceTheme")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ConferenceType");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("HostUnit")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOpen");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("PersonInCharge")
                        .HasMaxLength(50);

                    b.Property<string>("PostConferenceService");

                    b.Property<string>("PreConferenceService");

                    b.Property<string>("Remarks");

                    b.Property<string>("ServiceClassification");

                    b.Property<string>("ServiceInMeeting");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TimeStamp");

                    b.Property<int>("participants");

                    b.HasKey("Id");

                    b.ToTable("T_ConferenceRoomRegist");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.DataDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CustomAttributes");

                    b.Property<int?>("CustomType");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Sort");

                    b.Property<string>("Tips");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("T_DataDictionaries");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.DesireManagement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ClaimDate");

                    b.Property<int>("ClaimPeriod");

                    b.Property<string>("ClaimSituation")
                        .HasMaxLength(200);

                    b.Property<string>("Claimant")
                        .HasMaxLength(50);

                    b.Property<string>("ClaimantAddress")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimantContactNumber");

                    b.Property<Guid>("ClaimantJuWeiId");

                    b.Property<Guid>("ClaimantStreetId");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("DesireCategory");

                    b.Property<string>("DesireContent")
                        .HasMaxLength(500);

                    b.Property<string>("DesireName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DetailedAddress")
                        .HasMaxLength(500);

                    b.Property<string>("EvaluationOpinion")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<string>("JuWeiName");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid?>("PostStationId");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50);

                    b.Property<string>("RealizationSituation")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RegistionDate");

                    b.Property<string>("Registrant")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ReportDate");

                    b.Property<string>("ReportPerson")
                        .HasMaxLength(50);

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_DesireManagement");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Disability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Card");

                    b.Property<string>("Contacts");

                    b.Property<string>("ContactsPhone");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DisabilityLevel");

                    b.Property<Guid>("DisabilityType");

                    b.Property<int>("Employment");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Marriage");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Remarks");

                    b.Property<int>("Sex");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("T_Disabilites");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FavourableConditions")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("PreferentialName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PriceDescription")
                        .HasMaxLength(500);

                    b.Property<Guid>("ServiceGuid");

                    b.HasKey("Id");

                    b.ToTable("T_Discount");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.EventBurst", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisposeDetails")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("EventDetails")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("HappenTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("QuartersId");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<string>("RegisterUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_EventBurst");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Expenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accessory")
                        .HasMaxLength(3000);

                    b.Property<string>("AccessoryUrl")
                        .HasMaxLength(3000);

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DutyPeople")
                        .HasMaxLength(50);

                    b.Property<string>("ExpenditureName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Purpose")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("RegisterDate");

                    b.Property<string>("RegisterPeople")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<DateTime?>("UseDate");

                    b.Property<decimal>("UseMoney");

                    b.HasKey("Id");

                    b.ToTable("T_Expenditure");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.FixedAssets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<string>("DutyPeople")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(3000);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(3000);

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<DateTime?>("RegisterDate");

                    b.Property<string>("RegisterPeople")
                        .HasMaxLength(50);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<string>("Version")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_FixedAssets");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PeopleGroupId");

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<Guid>("WorkPersonId");

                    b.Property<string>("WorkPersonName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_GroupMember");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BenShiUserCount");

                    b.Property<double>("BuildArea");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("DoorCardId");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("OrientationId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int?>("WaiLaiUserCount");

                    b.HasKey("Id");

                    b.ToTable("T_House");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.JuWei", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Introduce")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JuWeiPeople")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<Guid>("PostStationId");

                    b.Property<string>("PostStationName")
                        .HasMaxLength(50);

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_JuWei");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Karma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ContactTel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("QuartersId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("RenQiId");

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("Test");

                    b.HasKey("Id");

                    b.ToTable("T_Karma");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.KarmaMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("ContactTel")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("Duties");

                    b.Property<string>("IDCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("KarmaId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Test");

                    b.HasKey("Id");

                    b.ToTable("T_KarmaMember");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.MapOverlays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MapCenter");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("T_MapOverlays");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionName");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FilePath");

                    b.Property<int?>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("MediaType");

                    b.Property<string>("ThumbnailPath");

                    b.Property<int?>("Width");

                    b.HasKey("Id");

                    b.ToTable("T_Medias");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorUserId");

                    b.Property<string>("CustomData");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("OrderIn");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("PermissionTarget");

                    b.Property<string>("Url")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.ToTable("T_Menus");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("NoticeChannel")
                        .HasMaxLength(50);

                    b.Property<string>("NoticeInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NoticePeople")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NoticeState")
                        .HasMaxLength(50);

                    b.Property<DateTime>("NoticeTime")
                        .HasMaxLength(50);

                    b.Property<string>("NoticeTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("StreetId")
                        .HasMaxLength(100);

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_Notices");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.OldPeople", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Card");

                    b.Property<Guid?>("Category");

                    b.Property<string>("Contacts");

                    b.Property<string>("ContactsPhone");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Marriage");

                    b.Property<string>("Name");

                    b.Property<Guid>("OldType");

                    b.Property<string>("Phone");

                    b.Property<string>("Remarks");

                    b.Property<int>("Sex");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.Property<bool?>("keji");

                    b.Property<bool?>("niunai");

                    b.Property<bool?>("yiyang");

                    b.HasKey("Id");

                    b.ToTable("T_OldPeople");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("AttachmentName");

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Contacts")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DetailsIntroduction")
                        .HasMaxLength(500);

                    b.Property<Guid>("IndustryCategory");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Members");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("OrganizationType");

                    b.HasKey("Id");

                    b.ToTable("T_Organization");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.OrganizationProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentName");

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("Client")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime>("ImplementationTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("PrimaryCoverage")
                        .HasMaxLength(500);

                    b.Property<Guid>("ProjectCategory");

                    b.Property<decimal>("ProjectFunds");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Registrant");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<string>("SourceFunds");

                    b.Property<string>("TargetGroup")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("T_OrganizationProject");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.OtherPeople", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<Guid>("BelongType");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Card");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Marriage");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Remarks");

                    b.Property<int>("Sex");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("T_OtherPeople");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ParkingLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChanQuanCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<string>("JuWeiName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("ParkingCount");

                    b.Property<int?>("PublicChargeCount");

                    b.Property<int?>("PublicCount");

                    b.Property<Guid>("QuartersId");

                    b.Property<string>("QuartersName")
                        .HasMaxLength(50);

                    b.Property<Guid>("StationId");

                    b.Property<string>("StationName");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_ParkingLot");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.People", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("IdCard");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PeopleAge")
                        .HasMaxLength(20);

                    b.Property<string>("PeopleCard")
                        .HasMaxLength(100);

                    b.Property<int>("PeopleIntegration")
                        .HasMaxLength(50);

                    b.Property<string>("PeopleMail")
                        .HasMaxLength(100);

                    b.Property<string>("PeopleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PeopleNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PeoplePicture")
                        .HasMaxLength(100);

                    b.Property<string>("PeopleSex")
                        .HasMaxLength(20);

                    b.Property<string>("PeopleTell")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_Peoples");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PeopleAndActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityID")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<bool>("IsComment")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PeopleID")
                        .HasMaxLength(50);

                    b.Property<int>("Satisfaction");

                    b.HasKey("Id");

                    b.ToTable("T_PeopleAndActivitys");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PeopleAndReceptionService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PeopleID")
                        .HasMaxLength(50);

                    b.Property<Guid>("ReceptinServiceID")
                        .HasMaxLength(50);

                    b.Property<int>("Satisfaction")
                        .HasMaxLength(50);

                    b.Property<int>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_PeopleAndReceptionServices");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PeopleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DutyPeople")
                        .HasMaxLength(50);

                    b.Property<string>("DutyPeopleTelPhone")
                        .HasMaxLength(50);

                    b.Property<int>("GroupCateGory");

                    b.Property<string>("GroupName")
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("WorkPersonIds");

                    b.HasKey("Id");

                    b.ToTable("T_PeopleGroup");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorUserId");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("TargetName");

                    b.Property<int>("permissionType");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.ToTable("T_Permissions");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PostStationVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PostStationId");

                    b.Property<string>("PostStationName")
                        .HasMaxLength(50);

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.Property<string>("ViedoImgPath")
                        .HasMaxLength(200);

                    b.Property<string>("ViedoName")
                        .HasMaxLength(50);

                    b.Property<string>("ViedoPath")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("T_Video");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ProjectServiceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentName");

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("ChargePerson");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("ProjectId");

                    b.Property<string>("Registrant");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<DateTime>("ServiceDate");

                    b.Property<string>("ServiceInfo");

                    b.Property<int>("ServiceNumber");

                    b.Property<string>("ServicePingjia");

                    b.Property<string>("ServicePlace")
                        .HasMaxLength(500);

                    b.Property<Guid>("ServiceType");

                    b.HasKey("Id");

                    b.ToTable("T_ProjectServiceRecord");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ProjectTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("ProgressDetail")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ProjectTrackDetail")
                        .HasMaxLength(500);

                    b.Property<Guid>("QuarterProjectId");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<string>("RegisterUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrackTime");

                    b.HasKey("Id");

                    b.ToTable("T_ProjectTrack");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminAddress")
                        .HasMaxLength(200);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EnclosureName")
                        .HasMaxLength(500);

                    b.Property<string>("EnclosureUrl")
                        .HasMaxLength(500);

                    b.Property<string>("GuaranteeTel")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(50);

                    b.Property<string>("ManagerTel")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("QuartersId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_Property");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PropertyRepair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactTel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisposeResult")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DisposeTime");

                    b.Property<string>("DisposeUser");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PropertyId");

                    b.Property<Guid>("QuartersId");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<string>("RegisterUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<string>("RepairAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("RepairMatter")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("RepairTime");

                    b.Property<Guid>("StationId");

                    b.Property<int>("StatusCode");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_PropertyRepair");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PropertyServe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChargeSituation")
                        .HasMaxLength(500);

                    b.Property<Guid>("ChargeSituationId");

                    b.Property<double?>("CostAmount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PropertyId");

                    b.Property<string>("ServeContent")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ServeTel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_PropertyServe");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.PublicIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeYearMonth");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double>("ExpenditureAmount");

                    b.Property<double>("IncomeAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRepairAmount");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<double>("LastWeekBalance");

                    b.Property<double>("NowWeekBalance");

                    b.Property<Guid>("QuartersId");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<string>("RegisterUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_PublicIncome");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuarterProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactTel")
                        .HasMaxLength(50);

                    b.Property<string>("ContactUser")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeclareTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Exploiting")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExploitingTime_End");

                    b.Property<DateTime?>("ExploitingTime_Start");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProjectDetail")
                        .HasMaxLength(500);

                    b.Property<Guid>("ProjectType");

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_QuarterProject");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Quarters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<double>("BuildArea");

                    b.Property<int?>("CityGirlUserCount");

                    b.Property<int?>("CityManUserCount");

                    b.Property<int?>("CityUserCount");

                    b.Property<string>("CompletedYear")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("ForeignGirlUserCount");

                    b.Property<int?>("ForeignManUserCount");

                    b.Property<int?>("ForeignUserCount");

                    b.Property<int?>("HujiCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWeiId");

                    b.Property<string>("JuWeiName")
                        .HasMaxLength(50);

                    b.Property<int?>("JuZhuCount");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("StationId");

                    b.Property<string>("StationName");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.Property<int>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("T_Quarters");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionBankManage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("TitleOptions")
                        .HasMaxLength(500);

                    b.Property<string>("TitleRemarks")
                        .HasMaxLength(500);

                    b.Property<int>("TitleType");

                    b.HasKey("Id");

                    b.ToTable("T_QuestionBankManage");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionBankOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("QuestionId");

                    b.Property<string>("TitleOptions")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("T_QuestionBankOption");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionnaireAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("OptionName");

                    b.Property<Guid>("TitleId");

                    b.Property<Guid>("WenJuanId");

                    b.HasKey("Id");

                    b.ToTable("T_QuestionnaireAnswer");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionnaireManage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("QuestionnaireName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("QuestionnaireType");

                    b.HasKey("Id");

                    b.ToTable("T_QuestionnaireManage");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionnaireOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("QuestionnaireTitleId");

                    b.Property<string>("WenJuanTitleOptions")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("T_QuestionnaireOptions");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.QuestionnaireTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("TitleImgName")
                        .HasMaxLength(500);

                    b.Property<string>("TitleImgPath")
                        .HasMaxLength(500);

                    b.Property<int>("TitleType");

                    b.Property<Guid>("WenJuanId");

                    b.HasKey("Id");

                    b.ToTable("T_QuestionnaireTitle");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ReceptionService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityImg");

                    b.Property<string>("ApplicationConditions")
                        .HasMaxLength(200);

                    b.Property<string>("ArchivalRemark");

                    b.Property<string>("Archiving");

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("Attachments");

                    b.Property<int>("CaChargeSituationtegory");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("FilingDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("IsGuiDang");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("MattersAttention")
                        .HasMaxLength(200);

                    b.Property<Guid?>("PostStationId");

                    b.Property<string>("PostStationName");

                    b.Property<string>("ServiceAddress")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ServiceAgencyId");

                    b.Property<string>("ServiceAgencyName");

                    b.Property<string>("ServiceBasis")
                        .HasMaxLength(200);

                    b.Property<decimal>("ServiceCost");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(500);

                    b.Property<string>("ServiceFlow")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("StreetId");

                    b.Property<string>("StreetName");

                    b.Property<string>("TimeDescription")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("T_ReceptionService");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Register", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("Cycle");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Info");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name");

                    b.Property<Guid>("OldPeopleId");

                    b.Property<int>("RegisterType");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<DateTime>("Time");

                    b.Property<Guid>("Type");

                    b.Property<string>("User");

                    b.Property<int>("level");

                    b.HasKey("Id");

                    b.ToTable("T_Registers");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.RegisterHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("Cycle");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Info");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name");

                    b.Property<Guid>("OldPeopleId");

                    b.Property<int>("RegisterType");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<DateTime>("Time");

                    b.Property<Guid>("Type");

                    b.Property<string>("User");

                    b.Property<int>("level");

                    b.HasKey("Id");

                    b.ToTable("T_RegisterHistorys");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.RegistrationOfUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("FixedAssetsId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<DateTime?>("PredictReturnDate");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("ReceivePeople")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RegisterDate");

                    b.Property<string>("RegisterPeople")
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("ReturnDate");

                    b.HasKey("Id");

                    b.ToTable("T_RegistrationOfUse");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ResidentWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministrativeBasis");

                    b.Property<float>("Charge");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Deadline")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("GuiDangRenark");

                    b.Property<DateTime?>("GuiDangTime");

                    b.Property<string>("GuiDangUser")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGuiDang");

                    b.Property<bool>("IsPublish");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Material");

                    b.Property<string>("RelevantPolicies");

                    b.Property<string>("Requirement");

                    b.Property<string>("ResidentWorkFlow");

                    b.Property<string>("ResidentWorkFlowImg")
                        .HasMaxLength(500);

                    b.Property<string>("ResidentWorkFlowImgPaths")
                        .HasMaxLength(500);

                    b.Property<string>("ResidentWorkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ResidentWorkType");

                    b.Property<string>("StationIds")
                        .HasMaxLength(500);

                    b.Property<string>("StationNames")
                        .HasMaxLength(500);

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_ResidentWork");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ResidentWork_Attach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("ResidentWorkId");

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.HasKey("Id");

                    b.ToTable("T_ResidentWork_Attach");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ResourceOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<Guid>("ResourceCategory");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.Property<double>("Xaxis");

                    b.Property<double>("Yaxis");

                    b.HasKey("Id");

                    b.ToTable("T_ResourceOrgs");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ResourcePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<Guid>("ResourceCategory");

                    b.Property<Guid>("ResourceType");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.Property<double>("Xaxis");

                    b.Property<double>("Yaxis");

                    b.HasKey("Id");

                    b.ToTable("T_ResourcePlaces");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorUserId");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.ToTable("T_Roles");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("T_RolePermission");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ServiceAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyCategory");

                    b.Property<string>("AgencyLeader")
                        .HasMaxLength(100);

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(500);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("QualificationsName");

                    b.Property<string>("QualificationsPath");

                    b.Property<string>("SaImgName");

                    b.Property<string>("SaImgPath");

                    b.HasKey("Id");

                    b.ToTable("T_ServiceAgency");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ServiceApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ApplicationDate");

                    b.Property<string>("ApplicationNotes");

                    b.Property<int?>("ApplicationSource");

                    b.Property<string>("Comment");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("IsReceive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<DateTime?>("PJ_RegistDate");

                    b.Property<int?>("PJ_RegistStatus");

                    b.Property<string>("PJ_Registrant");

                    b.Property<DateTime?>("ReceivingDate");

                    b.Property<string>("Recipient");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Registrant")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int>("Satisfaction");

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("ServiceResults");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("T_ServiceApplication");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.ServiceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EvaluationContent");

                    b.Property<DateTime>("EvaluationDate");

                    b.Property<string>("Evaluator");

                    b.Property<string>("EvaluatorImgPath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Satisfaction");

                    b.Property<Guid>("ServiceGuid");

                    b.Property<string>("UserGuid");

                    b.HasKey("Id");

                    b.ToTable("T_ServiceEvaluation");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.SpecialCare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Card");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int>("Marriage");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Remarks");

                    b.Property<int>("Sex");

                    b.Property<Guid>("SpecialCareType");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("T_SpecialCares");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lng");

                    b.Property<int>("Sort");

                    b.Property<string>("StationAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("StationImg")
                        .HasMaxLength(100);

                    b.Property<string>("StationInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StationNameJX");

                    b.Property<string>("StationPeople")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StationSrc")
                        .HasMaxLength(500);

                    b.Property<string>("StationTell")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StationTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StationType")
                        .HasMaxLength(50);

                    b.Property<Guid>("StreetID");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("T_Stations");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lng");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200);

                    b.Property<string>("StreetAttr1")
                        .HasMaxLength(200);

                    b.Property<string>("StreetAttr2")
                        .HasMaxLength(200);

                    b.Property<string>("StreetAttr3")
                        .HasMaxLength(200);

                    b.Property<string>("StreetImg")
                        .HasMaxLength(500);

                    b.Property<string>("StreetInfo")
                        .HasMaxLength(500);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StreetPaths")
                        .HasMaxLength(500);

                    b.Property<string>("StreetPeople")
                        .HasMaxLength(50);

                    b.Property<string>("StreetTell")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_Street");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorUserId");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("IdCard");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsPhoneNumConfirmed");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PeopleAge")
                        .HasMaxLength(20);

                    b.Property<string>("PeopleCard")
                        .HasMaxLength(100);

                    b.Property<int?>("PeopleIntegration")
                        .HasMaxLength(50);

                    b.Property<string>("PeoplePicture")
                        .HasMaxLength(100);

                    b.Property<string>("PeopleSex")
                        .HasMaxLength(20);

                    b.Property<string>("PeopleTell")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNum")
                        .HasMaxLength(20);

                    b.Property<Guid?>("PostStationId");

                    b.Property<string>("PostStationName");

                    b.Property<string>("RealName")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("StreetId");

                    b.Property<string>("StreetName");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId")
                        .IsUnique()
                        .HasFilter("[CreatorUserId] IS NOT NULL");

                    b.ToTable("T_Users");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("T_UserRoles");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.WeiXiuJiBaoFeiDengJi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CurrentState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<Guid>("FixedAssetsId");

                    b.Property<DateTime?>("HappenDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<DateTime?>("RegisterDate");

                    b.Property<string>("RegisterPeople")
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.ToTable("T_WeiXiuJiBaoFeiDengJi");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.WorkDispose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisposeResult");

                    b.Property<DateTime?>("DisposeTime");

                    b.Property<string>("DisposeUser")
                        .HasMaxLength(50);

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PostStationId");

                    b.Property<string>("PostStationName")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks");

                    b.Property<Guid>("ResidentWorkId");

                    b.Property<string>("ResidentWorkName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("StreetId");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("YuYueTime");

                    b.HasKey("Id");

                    b.ToTable("T_WorkDispose");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.WorkforceManagement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeginTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("DayState");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PeopleGroupId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("RegisterPeople")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<Guid>("StationId");

                    b.Property<Guid>("StreetId");

                    b.Property<string>("WorkforceDay")
                        .HasMaxLength(20);

                    b.Property<string>("WorkforceMonth")
                        .HasMaxLength(20);

                    b.Property<string>("WorkforceWeek")
                        .HasMaxLength(50);

                    b.Property<string>("WorkforceYear")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("T_WorkforceManagement");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.WorkPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDay");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("Degree");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("Ethnic");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("PerCard");

                    b.Property<string>("PerId");

                    b.Property<string>("PerImg")
                        .HasMaxLength(200);

                    b.Property<string>("PerImgSrc")
                        .HasMaxLength(1000);

                    b.Property<string>("PerName");

                    b.Property<Guid>("PerType");

                    b.Property<int>("Phone");

                    b.Property<Guid>("PoliticalAspects");

                    b.Property<string>("Post");

                    b.Property<int>("Sex");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.HasKey("Id");

                    b.ToTable("T_WorkPersons");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.WorkTransact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisposeResult")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DisposeTime");

                    b.Property<string>("DisposeUser")
                        .HasMaxLength(50);

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("PeopleID");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("ResidentWorkId");

                    b.Property<string>("ResidentWorkName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ShouliAddress")
                        .HasMaxLength(200);

                    b.Property<string>("ShouliContent")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ShouliTime");

                    b.Property<string>("ShouliUser")
                        .HasMaxLength(50);

                    b.Property<Guid?>("StationId");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("StreetId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("T_WorkTransact");
                });

            modelBuilder.Entity("CoreSolution.Domain.ResourcePerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Card");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("Degree");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JuWei");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name");

                    b.Property<Guid>("PerType");

                    b.Property<string>("Phone");

                    b.Property<int>("Sex");

                    b.Property<Guid>("Station");

                    b.Property<Guid>("Street");

                    b.Property<string>("Strength");

                    b.HasKey("Id");

                    b.ToTable("T_ResourcePerson");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Menu", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("CoreSolution.Domain.Entities.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Permission", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("CoreSolution.Domain.Entities.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.Role", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("CoreSolution.Domain.Entities.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.User", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.User", "CreatorUser")
                        .WithOne("DeleterUser")
                        .HasForeignKey("CoreSolution.Domain.Entities.User", "CreatorUserId");
                });

            modelBuilder.Entity("CoreSolution.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("CoreSolution.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreSolution.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
